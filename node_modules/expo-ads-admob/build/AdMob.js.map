{"version":3,"file":"AdMob.js","sourceRoot":"","sources":["../src/AdMob.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAEL,gBAAgB,GAEjB,MAAM,kCAAkC,CAAC;AAE1C,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,OAAO,EAAsB,gBAAgB,EAAwB,CAAC;AAEtE,MAAM,0BAA0B,GAAuB;IACrD,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,OAAO;IAChB,WAAW,EAAE,IAAI;IACjB,MAAM,EAAE,gBAAgB,CAAC,OAAO;CACjC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,uBAAuB;IAC3C,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;KACpD;IAED,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE;QACzC,MAAM,IAAI,mBAAmB,CAAC,OAAO,EAAE,yBAAyB,CAAC,CAAC;KACnE;IACD,OAAO,MAAM,YAAY,CAAC,uBAAuB,EAAE,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;KACpD;IAED,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE;QACrC,MAAM,IAAI,mBAAmB,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;KAC/D;IACD,OAAO,MAAM,YAAY,CAAC,mBAAmB,EAAE,CAAC;AAClD,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,CAAC,CAAC,YAAY,CAAC,oBAAoB,CAAC;AAC7C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,YAA2B;IACpE,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE;QACtC,MAAM,IAAI,mBAAmB,CAAC,gBAAgB,EAAE,sBAAsB,CAAC,CAAC;KACzE;IACD,MAAM,YAAY,CAAC,oBAAoB,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n} from 'unimodules-permissions-interface';\n\nimport ExpoAdsAdMob from './ExpoAdsAdMob';\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration };\n\nconst androidPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExpoAdsAdMob.requestPermissionsAsync) {\n    throw new UnavailabilityError('AdMod', 'requestPermissionsAsync');\n  }\n  return await ExpoAdsAdMob.requestPermissionsAsync();\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExpoAdsAdMob.getPermissionsAsync) {\n    throw new UnavailabilityError('AdMod', 'getPermissionsAsync');\n  }\n  return await ExpoAdsAdMob.getPermissionsAsync();\n}\n\n/**\n * Returns whether the AdMob API is enabled on the current device. This does not check the native configuration.\n *\n * @returns Async `boolean`, indicating whether the AdMob API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoAdsAdMob.setTestDeviceIDAsync;\n}\n\nexport async function setTestDeviceIDAsync(testDeviceID: string | null): Promise<void> {\n  if (!ExpoAdsAdMob.setTestDeviceIDAsync) {\n    throw new UnavailabilityError('expo-ads-admob', 'setTestDeviceIDAsync');\n  }\n  await ExpoAdsAdMob.setTestDeviceIDAsync(testDeviceID || '');\n}\n"]}